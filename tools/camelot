#!/usr/bin/env python2
from __future__ import print_function
import os
import sys
import time
import logging

from docopt import docopt
from PyPDF2 import PdfFileReader

from camelot.pdf import Pdf
from camelot.lattice import Lattice
from camelot.stream import Stream


doc = """
Camelot: PDF parsing made simpler!

usage:
 camelot [options] <method> [<args>...]

options:
 -h, --help                Show this screen.
 -v, --version             Show version.
 -V, --verbose             Verbose.
 -p, --pages <pageno>      Comma-separated list of page numbers.
                           Example: -p 1,3-6,10  [default: 1]
 -P, --parallel            Parallelize the parsing process.
 -f, --format <format>     Output format. (csv,tsv,html,json,xlsx) [default: csv]
 -l, --log                 Log to file.
 -o, --output <directory>  Output directory.
 -M, --cmargin <cmargin>   Char margin. Chars closer than cmargin are
                           grouped together to form a word. [default: 2.0]
 -L, --lmargin <lmargin>   Line margin. Lines closer than lmargin are
                           grouped together to form a textbox. [default: 0.5]
 -W, --wmargin <wmargin>   Word margin. Insert blank spaces between chars
                           if distance between words is greater than word
                           margin. [default: 0.1]
 -S, --save-info           Save parsing info for each page to a file.
 -X, --plot-page           Plot a bar chart for every page showing number of
                           empty cells in each row/column of a table.
 -Y, --plot-all            Plot a bar chart showing number of rows with a specific
                           percentage of empty cells.

camelot methods:
 lattice  Looks for lines between data.
 stream   Looks for spaces between data.

See 'camelot <method> -h' for more information on a specific method.
"""

lattice_doc = """
Lattice method looks for lines between text to form a table.

usage:
 camelot lattice [options] [--] <file>

options:
 -F, --fill <fill>    Fill data in horizontal and/or vertical spanning
                      cells. Example: -F h, -F v, -F hv
 -s, --scale <scale>  Scaling factor. Large scaling factor leads to
                      smaller lines being detected. [default: 15]
 -j, --jtol <jtol>    Tolerance to account for when comparing joint
                      and line coordinates. [default: 2]
 -m, --mtol <mtol>    Tolerance to account for when merging lines
                      which are very close. [default: 2]
 -i, --invert         Invert pdf image to make sure that lines are
                      in foreground.
 -d, --debug <debug>  Debug by visualizing pdf geometry.
                      (contour,line,joint,table) Example: -d table
"""

stream_doc = """
Stream method looks for whitespaces between text to form a table.

usage:
 camelot stream [options] [--] <file>

options:
 -n, --ncols <ncols>      Number of columns. [default: 0]
 -c, --columns <columns>  Comma-separated list of column x-coordinates.
                          Example: -c 10.1,20.2,30.3
 -y, --ytol <ytol>        Tolerance to account for when grouping rows
                          together. [default: 2]
 -m, --mtol <mtol>        Tolerance to account for when merging columns
                          together. [default: 2]
 -C, --ctol <ctol>        Tolerance to account for when assigning text
                          object to column. [default: 10]
 -d, --debug              Debug by visualizing textboxes.
"""


def plot_pagewise_barchart(r, c, p):
    import numpy as np
    import matplotlib.pyplot as plt

    row_idx = [i + 1 for i, row in enumerate(r)]
    col_idx = [i + 1 for i, col in enumerate(c)]
    r_index = np.arange(len(r))
    c_index = np.arange(len(c))
    width = 0.7

    plt.subplot(2, 1, 1)
    plt.title('Percentage of empty cells in table: {0:.2f}'.format(p))
    plt.xlabel('row index')
    plt.ylabel('number of empty cells in row')
    plt.bar(r_index, r)
    plt.xticks(r_index + width * 0.5, row_idx)
    plt.ylim(0, len(c))

    plt.subplot(2, 1, 2)
    plt.xlabel('column index')
    plt.ylabel('number of empty cells in column')
    plt.bar(c_index, c)
    plt.xticks(c_index + width * 0.5, col_idx)
    plt.ylim(0, len(r))
    plt.show()


def plot_overall_barchart(data):
    from collections import Counter
    import matplotlib.pyplot as plt

    r_empty_cells = []
    for page_number in data.keys():
        page = data[page_number]
        for table_number in page.keys():
            table = page[table_number]
            r_empty_cells.extend([r / float(table['ncols']) for r in table['r_empty_cells']])
    c = Counter(r_empty_cells)
    if 0.0 not in c:
        c.update({0.0: 0})
    if 1.0 not in c:
        c.update({1.0: 0})
    plt.xlabel('percentage of empty cells in a row')
    plt.ylabel('number of rows')
    plt.bar(c.keys(), c.values(), align='center', width=0.1)
    ymax = max(c.values()) + 0.1 * max(c.values())
    plt.ylim(0, ymax)
    plt.show()


def convert_to_html(table):
    html = ''
    html = ''.join([html, '<table border="1">\n'])
    for row in table:
        html = ''.join([html, ' <tr>\n'])
        for data in row:
            html = ''.join([html, '  <td>', data, '</td>\n'])
        html = ''.join([html, ' </tr>\n'])
    html = ''.join([html, '</table>\n'])
    return html


def write_to_disk(data, f='csv', output=None, filename=None):
    # raise something if filename and/or output are None
    fname = os.path.basename(filename)
    froot, __ = os.path.splitext(fname)
    if f in ['csv', 'tsv']:
        import csv
        delimiter = ',' if f == 'csv' else '\t'
        for page_number in sorted(data.keys()):
            for table_number in sorted(data[page_number].keys()):
                dsvname = '{0}.{1}'.format(''.join([page_number, '_', table_number]), f)
                with open(os.path.join(output, dsvname), 'w') as outfile:
                    writer = csv.writer(
                        outfile, delimiter=delimiter, quoting=csv.QUOTE_ALL)
                    for row in data[page_number][table_number]['data']:
                        writer.writerow(row)
    elif f == 'html':
        htmlname = '{0}.html'.format(froot)
        for page_number in sorted(data.keys()):
            for table_number in sorted(data[page_number].keys()):
                with open(os.path.join(output, htmlname), 'a') as htmlfile:
                    htmlfile.write(convert_to_html(data[page_number][table_number]['data']))
    elif f == 'json':
        import json
        with open(os.path.join(output, '{0}.json'.format(froot)), 'w') \
                as jsonfile:
            json.dump(data, jsonfile)
    elif f == 'xlsx':
        try:
            from pyexcel_xlsx import save_data
            from collections import OrderedDict
            xlsx_data = OrderedDict()
            for page_number in sorted(data.keys(), key=lambda x: int(x[5:])):
                for table_number in sorted(data[page_number].keys(), key=lambda x: int(x[6:])):
                    sheet_name = ''.join([page_number, '_', table_number])
                    xlsx_data.update({sheet_name:
                                      [row for row in data[page_number][table_number]['data']]})
            save_data(os.path.join(output, '{0}.xlsx'.format(froot)), xlsx_data)
        except ImportError:
            print("link to install docs")


if __name__ == '__main__':
    start_time = time.time()

    args = docopt(doc, version='0.1', options_first=True)
    argv = [args['<method>']] + args['<args>']
    if args['<method>'] == 'lattice':
        args.update(docopt(lattice_doc, argv=argv))
    elif args['<method>'] == 'stream':
        args.update(docopt(stream_doc, argv=argv))

    vprint = print if args['--verbose'] else lambda *a, **k: None
    filename = args['<file>']
    filedir = os.path.dirname(args['<file>'])
    logname, __ = os.path.splitext(filename)
    logname = ''.join([logname, '.log'])
    scorename, __ = os.path.splitext(filename)
    scorename = ''.join([scorename, '_info.csv'])

    if args['--log']:
        FORMAT = '%(asctime)s - %(levelname)s - %(message)s'
        if args['--output']:
            logname = os.path.join(args['--output'], os.path.basename(logname))
        logging.basicConfig(
            filename=logname, filemode='w', format=FORMAT, level=logging.DEBUG)

    p = []
    if args['--pages'] == '1':
        p.append({'start': 1, 'end': 1})
    else:
        if args['--pages'] == 'all':
            infile = PdfFileReader(open(filename, 'rb'), strict=False)
            p.append({'start': 1, 'end': infile.getNumPages()})
        else:
            for r in args['--pages'].split(','):
                if '-' in r:
                    a, b = r.split('-')
                    p.append({'start': int(a), 'end': int(b)})
                else:
                    p.append({'start': int(r), 'end': int(r)})

    margin_tuple = (float(args['--cmargin']), float(args['--lmargin']),
        float(args['--wmargin']))
    if args['<method>'] == 'lattice':
        try:
            manager = Pdf(Lattice(
                                  fill=args['--fill'],
                                  scale=int(args['--scale']),
                                  jtol=int(args['--jtol']),
                                  mtol=int(args['--mtol']),
                                  invert=args['--invert'],
                                  pdf_margin=margin_tuple,
                                  debug=args['--debug']),
                          filename,
                          pagenos=p,
                          parallel=args['--parallel'],
                          clean=True)
            data = manager.extract()
            
            processing_time = time.time() - start_time
            vprint("Finished processing in", processing_time, "seconds")
            logging.info("Finished processing in " + str(processing_time) + " seconds")
            
            if args['--plot-all']:
                plot_overall_barchart(data)
            
            if args['--plot-page']:
                for page_number in sorted(data.keys(), key=lambda x: int(x[5:])):
                    page = data[page_number]
                    for table_number in sorted(page.keys(), key=lambda x: int(x[6:])):
                        table = page[table_number]
                        plot_pagewise_barchart(table['r_empty_cells'],
                            table['c_empty_cells'],
                            table['empty_p'])
            
            if args['--save-info']:
                if args['--output']:
                    scorename = os.path.join(args['--output'], os.path.basename(scorename))
                with open(scorename, 'w') as score_file:
                    score_file.write('table,nrows,ncols,n_empty_rows,n_empty_cols,'
                        'empty_p,r_empty_cells,c_empty_cells,line_p,text_p,score\n')
                    for page_number in sorted(data.keys(), key=lambda x: int(x[5:])):
                        page = data[page_number]
                        for table_number in sorted(page.keys(), key=lambda x: int(x[6:])):
                            table = page[table_number]
                            score_file.write('{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}\n'.format(
                                ''.join([page_number, '_', table_number]),
                                table['nrows'],
                                table['ncols'],
                                table['n_empty_rows'],
                                table['n_empty_cols'],
                                table['empty_p'],
                                ':'.join([str(d) for d in table['r_empty_cells']]),
                                ':'.join([str(d) for d in table['c_empty_cells']]),
                                table['line_p'],
                                table['text_p'],
                                table['score']))
            if args['--debug']:
                manager.debug_plot()
        except Exception as e:
            logging.exception(e.message, exc_info=True)
            sys.exit()
    elif args['<method>'] == 'stream':
        try:
            manager = Pdf(Stream(
                                 ncolumns=int(args['--ncols']),
                                 columns=args['--columns'],
                                 ytol=int(args['--ytol']),
                                 mtol=int(args['--mtol']),
                                 ctol=int(args['--ctol']),
                                 pdf_margin=margin_tuple,
                                 debug=args['--debug']),
                          filename,
                          pagenos=p,
                          parallel=args['--parallel'],
                          clean=True)
            data = manager.extract()
            
            processing_time = time.time() - start_time
            vprint("Finished processing in", processing_time, "seconds")
            logging.info("Finished processing in " + str(processing_time) + " seconds")
            
            if args['--plot-all']:
                plot_overall_barchart(data)
            
            if args['--plot-page']:
                for page_number in sorted(data.keys(), key=lambda x: int(x[5:])):
                    page = data[page_number]
                    for table_number in sorted(page.keys(), key=lambda x: int(x[6:])):
                        table = page[table_number]
                        plot_pagewise_barchart(table['r_empty_cells'],
                            table['c_empty_cells'], table['empty_p'])
            
            if args['--save-info']:
                if args['--output']:
                    scorename = os.path.join(args['--output'], os.path.basename(scorename))
                with open(scorename, 'w') as score_file:
                    score_file.write('table,nrows,ncols,n_empty_rows,n_empty_cols,'
                        'empty_p,r_empty_cells,c_empty_cells,score\n')
                    for page_number in sorted(data.keys(), key=lambda x: int(x[5:])):
                        page = data[page_number]
                        for table_number in sorted(page.keys(), key=lambda x: int(x[6:])):
                            table = page[table_number]
                            score_file.write('{0},{1},{2},{3},{4},{5},{6},{7},{8}\n'.format(
                                ''.join([page_number, '_', table_number]),
                                table['nrows'],
                                table['ncols'],
                                table['n_empty_rows'],
                                table['n_empty_cols'],
                                table['empty_p'],
                                ':'.join([str(d) for d in table['r_empty_cells']]),
                                ':'.join([str(d) for d in table['c_empty_cells']]),
                                table['score']))
            
            if args['--debug']:
                manager.debug_plot()
        except Exception as e:
            logging.exception(e.message, exc_info=True)
            sys.exit()

    if args['--debug']:
        print("See 'camelot <method> -h' for various parameters you can tweak.")
    else:
        output = filedir if args['--output'] is None else args['--output']
        write_to_disk(data, f=args['--format'],
                      output=output, filename=filename)
